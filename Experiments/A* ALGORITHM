import heapq

class PuzzleState:
    def __init__(self, board, g, h, parent=None):
        self.board = board
        self.g = g  # cost so far
        self.h = h  # heuristic
        self.f = g + h
        self.parent = parent

    def __lt__(self, other):
        return self.f < other.f

def manhattan_distance(state, goal):
    distance = 0
    for i in range(9):
        if state[i] != 0:
            x1, y1 = divmod(i, 3)
            x2, y2 = divmod(goal.index(state[i]), 3)
            distance += abs(x1 - x2) + abs(y1 - y2)
    return distance

def get_neighbors(state):
    neighbors = []
    idx = state.index(0)
    x, y = divmod(idx, 3)
    moves = [(-1,0), (1,0), (0,-1), (0,1)]
    
    for dx, dy in moves:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_idx = new_x * 3 + new_y
            new_state = state[:]
            new_state[idx], new_state[new_idx] = new_state[new_idx], new_state[idx]
            neighbors.append(new_state)
    return neighbors

def reconstruct_path(state):
    path = []
    while state:
        path.append(state.board)
        state = state.parent
    return path[::-1]

def a_star_8puzzle(start, goal):
    open_list = []
    closed_set = set()
    h = manhattan_distance(start, goal)
    start_state = PuzzleState(start, 0, h)
    heapq.heappush(open_list, start_state)
    
    while open_list:
        current = heapq.heappop(open_list)

        if current.board == goal:
            return reconstruct_path(current)

        closed_set.add(tuple(current.board))

        for neighbor in get_neighbors(current.board):
            if tuple(neighbor) in closed_set:
                continue
            g = current.g + 1
            h = manhattan_distance(neighbor, goal)
            neighbor_state = PuzzleState(neighbor, g, h, current)
            heapq.heappush(open_list, neighbor_state)
    
    return None

# ðŸ”¹ User Input
print("Enter the start state of 8-puzzle (use 0 for blank):")
start = []
for i in range(3):
    row = list(map(int, input(f"Row {i+1}: ").split()))
    start.extend(row)

print("\nEnter the goal state of 8-puzzle (use 0 for blank):")
goal = []
for i in range(3):
    row = list(map(int, input(f"Row {i+1}: ").split()))
    goal.extend(row)

solution = a_star_8puzzle(start, goal)

if solution:
    print("\nSteps to solve the 8-Puzzle using A*:\n")
    for step in solution:
        for i in range(0, 9, 3):
            print(step[i:i+3])
        print()
else:
    print("No solution found.")
